// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Slutprojekt.Infrastructure.Persistance;

#nullable disable

namespace Slutprojekt.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250609133608_added admin")]
    partial class addedadmin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Slutprojekt.Domain.Entities.Breed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BreedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BreedType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Breeds");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            BreedName = "Collie, långhårig",
                            BreedType = 1,
                            Description = "Massa mjuk päls, elegant, lättlärd och gillar aktiviteter"
                        },
                        new
                        {
                            Id = 9,
                            BreedName = "Vit herdehud",
                            BreedType = 1,
                            Description = "Livlig, lättlärd sällskapshund med behov av aktivitet"
                        },
                        new
                        {
                            Id = 8,
                            BreedName = "Tysk schäferhund",
                            BreedType = 1,
                            Description = "Samarbetsvillig, livlig och uppmärksam jobbkompis"
                        },
                        new
                        {
                            Id = 23,
                            BreedName = "Boxer",
                            BreedType = 2,
                            Description = "Alert, arbetsvillig och livsglad bästa vän"
                        },
                        new
                        {
                            Id = 24,
                            BreedName = "Grand danois",
                            BreedType = 2,
                            Description = "Trofast, stor, stark och pampig"
                        },
                        new
                        {
                            Id = 25,
                            BreedName = "Leonberger",
                            BreedType = 2,
                            Description = "Behaglig och följsam med behov av fast hand"
                        },
                        new
                        {
                            Id = 36,
                            BreedName = "Bedlingtonterrier",
                            BreedType = 3,
                            Description = "Annorlunda utseende, charmig med stark vilja."
                        },
                        new
                        {
                            Id = 47,
                            BreedName = "Tax",
                            BreedType = 4,
                            Description = "Vänlig, envis och uthållig trots sina korta ben"
                        },
                        new
                        {
                            Id = 5,
                            BreedName = "Tysk spets/mittelspitz",
                            BreedType = 5,
                            Description = "Livlig, lättlärd pälsboll som hänger med"
                        },
                        new
                        {
                            Id = 66,
                            BreedName = "Basset hound",
                            BreedType = 6,
                            Description = "Social, tillgiven kortbent spårexpert"
                        },
                        new
                        {
                            Id = 67,
                            BreedName = "Beagle",
                            BreedType = 6,
                            Description = "Envis, arbetsvillig och glad"
                        },
                        new
                        {
                            Id = 71,
                            BreedName = "Engelsk setter",
                            BreedType = 7,
                            Description = "Energisk och krävande med passion för fågeljakt"
                        },
                        new
                        {
                            Id = 33,
                            BreedName = "Golden retriever",
                            BreedType = 8,
                            Description = "Vänlig och aktiv med stor passion för vatten"
                        },
                        new
                        {
                            Id = 32,
                            BreedName = "Labrador retriever",
                            BreedType = 8,
                            Description = "Social och stark apportör som är duktig på det mesta"
                        },
                        new
                        {
                            Id = 11,
                            BreedName = "Chihuahua, korthårig",
                            BreedType = 9,
                            Description = "Liten och sällskaplig hund som kan ta ton (vill inte bli uppäten!)"
                        },
                        new
                        {
                            Id = 14,
                            BreedName = "Afghanhund",
                            BreedType = 10,
                            Description = "Självständig skönhet med böljande päls."
                        },
                        new
                        {
                            Id = 12,
                            BreedName = "Greyhound",
                            BreedType = 10,
                            Description = "Vänlig, envis, stor och specialist på kapplöpning."
                        });
                });

            modelBuilder.Entity("Slutprojekt.Domain.Entities.BreedType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BreedTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BreedTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BreedTypeName = "Grupp 1 - Vall-, boskaps- och herdehundar"
                        },
                        new
                        {
                            Id = 2,
                            BreedTypeName = "Grupp 2 - Schnauzer och pinscher, molosser och bergshundar samt sennenhundar"
                        },
                        new
                        {
                            Id = 3,
                            BreedTypeName = "Grupp 3 - Terrier"
                        },
                        new
                        {
                            Id = 4,
                            BreedTypeName = "Grupp 4 - Taxar"
                        },
                        new
                        {
                            Id = 5,
                            BreedTypeName = "Grupp 5 - Spetsar och raser av urhundstyp"
                        },
                        new
                        {
                            Id = 6,
                            BreedTypeName = "Grupp 6 - Drivande hundar samt sök- och spårhundar"
                        },
                        new
                        {
                            Id = 7,
                            BreedTypeName = "Grupp 7 - Stående fågelhundar"
                        },
                        new
                        {
                            Id = 8,
                            BreedTypeName = "Grupp 8 - Stötande hundar, apporterande hundar och vattenhundar"
                        },
                        new
                        {
                            Id = 9,
                            BreedTypeName = "Grupp 9 - Sällskapshundar"
                        },
                        new
                        {
                            Id = 10,
                            BreedTypeName = "Grupp 10 - Vinthundar"
                        });
                });

            modelBuilder.Entity("Slutprojekt.Infrastructure.Persistance.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Admin")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Slutprojekt.Infrastructure.Persistance.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Slutprojekt.Infrastructure.Persistance.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Slutprojekt.Infrastructure.Persistance.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Slutprojekt.Infrastructure.Persistance.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
